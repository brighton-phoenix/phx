version: 2.0
jobs:
  build:
    docker:
      - image: cimg/python:3.8.12-node
        environment:
          PIPENV_VENV_IN_PROJECT: true
    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.8.12/site-packages
      - restore_cache:
          keys:
            - dependency-cache-npm-{{ checksum "package.json" }}
            - dependency-cache-npm-
      - restore_cache:
          keys:
            - dependency-cache-pip-{{ checksum "requirements/ci.txt" }}
            - dependency-cache-pip-
      - run:
          name: NPM install
          command: npm install
      - save_cache:
          key: dependency-cache-npm-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
          name: pip install
          command: |
            sudo pip install pipenv
            pipenv install -r requirements/ci.txt
      - save_cache:
          key: dependency-cache-pip-{{ checksum "requirements/ci.txt" }}
          paths:
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.8.12/site-packages"

  lint_frontend:
    docker:
      - image: cimg/python:3.8.12-node
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-npm-{{ checksum "package.json" }}
      - run:
          name: Lint (Frontend)
          command: npm run lint

  lint_backend:
    docker:
      - image: cimg/python:3.8.12-node
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-pip-{{ checksum "requirements/ci.txt" }}
      - run:
          name: Lint (Backend)
          command: |
            cd phx
            pipenv run isort --check-only --quiet --recursive --diff phx
            pipenv run yapf --diff --recursive --exclude=*migrations* phx
            pipenv run flake8

  test_backend:
    docker:
      - image: cimg/python:3.8.12-node
        environment:
          PGHOST: 127.0.0.1
          PGUSER: root

      - image: circleci/postgres:10-alpine-postgis
        environment:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpw
          POSTGRES_DB: testdb
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-npm-{{ checksum "package.json" }}
      - restore_cache:
          keys:
            - dependency-cache-pip-{{ checksum "requirements/ci.txt" }}
      - run:
          name: build frontend
          command: npm run build
      - run:
          name: Test (Backend)
          command: |
            cp .env.ci.example .env
            cd phx && pipenv run python manage.py test --settings=phx.settings.ci

workflows:
  version: 2
  build:
    jobs:
      - build
      - lint_frontend:
          requires:
            - build
      - lint_backend:
          requires:
            - build
      - test_backend:
          requires:
            - build
